{"version":3,"sources":["App.tsx","actions/index.ts","reducers/noteReducer.ts","reducers/index.ts","store.ts","index.tsx"],"names":["App","notes","useSelector","state","useState","value","setValue","dispatch","useDispatch","className","type","onChange","e","target","onClick","payload","map","note","index","noteReducer","action","toString","filter","_","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+LA6CeA,MAvCf,WACE,IAAMC,EAAQC,aAAY,SAACC,GAAD,OAAwBA,EAAMF,SACxD,EAA0BG,mBAAiB,IAA3C,mBAAOC,EAAP,KAAcC,EAAd,KACMC,EAAWC,cACjB,OACE,sBAAKC,UAAU,MAAf,UACE,uBACEC,KAAK,OACLL,MAAOA,EACPM,SAAU,SAACC,GACTN,EAASM,EAAEC,OAAOR,UAGtB,wBACES,QAAS,WACPP,ECVD,CACLG,KAAM,WACNK,QDQuBV,IACjBC,EAAS,KAHb,sBAQCL,EAAMe,KAAI,SAACC,EAAcC,GACxB,OACE,sBAAiBT,UAAU,QAA3B,UACE,6BAAKQ,IACL,wBACEH,QAAS,WACPP,ECfP,CACLG,KAAM,cACNK,QDagCG,KAFxB,sBAFQA,U,eEdLC,EAdK,WAAyD,IAAxDhB,EAAuD,uDAArC,GAAIiB,EAAiC,uCAC1E,OAAQA,EAAOV,MACb,IAAK,WACH,IAAMK,EAAUK,EAAOL,QAAQM,WAC/B,MAAM,GAAN,mBAAWlB,GAAX,CAAkBY,IACpB,IAAK,cACH,OAAOZ,EAAMmB,QACX,SAACC,EAAWL,GAAZ,OAA8BA,IAAUE,EAAOL,WAEnD,QACE,OAAOZ,ICDEqB,EANKC,YAAgB,CAClCxB,MAAOkB,ICDMO,EAFDC,YAAYH,GCK1BI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJK,SAASC,eAAe,W","file":"static/js/main.12d9ce70.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { reducerType } from \"./reducers\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addNote, deleteNote } from \"./actions/index\";\n\nfunction App() {\n  const notes = useSelector((state: reducerType) => state.notes);\n  const [value, setValue] = useState<string>(\"\");\n  const dispatch = useDispatch();\n  return (\n    <div className=\"App\">\n      <input\n        type=\"text\"\n        value={value}\n        onChange={(e) => {\n          setValue(e.target.value);\n        }}\n      ></input>\n      <button\n        onClick={() => {\n          dispatch(addNote(value));\n          setValue(\"\");\n        }}\n      >\n        Add Note\n      </button>\n      {notes.map((note: string, index: number) => {\n        return (\n          <div key={index} className=\"todos\">\n            <h1>{note}</h1>\n            <button\n              onClick={() => {\n                dispatch(deleteNote(index));\n              }}\n            >\n              Delete\n            </button>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default App;\n","export interface addNoteAction {\r\n  type: string;\r\n  payload: string;\r\n}\r\nexport interface deleteNoteAction {\r\n  type: string;\r\n  payload: number;\r\n}\r\n\r\nexport type actionType = addNoteAction | deleteNoteAction;\r\nconst addNote = (name: string): actionType => {\r\n  return {\r\n    type: \"ADD_NOTE\",\r\n    payload: name,\r\n  };\r\n};\r\n\r\nconst deleteNote = (id: number): actionType => {\r\n  return {\r\n    type: \"DELETE_NOTE\",\r\n    payload: id,\r\n  };\r\n};\r\n\r\nexport { addNote, deleteNote };\r\n","import { actionType } from \"../actions\";\r\nconst noteReducer = (state: string[] = [], action: actionType): string[] => {\r\n  switch (action.type) {\r\n    case \"ADD_NOTE\":\r\n      const payload = action.payload.toString();\r\n      return [...state, payload];\r\n    case \"DELETE_NOTE\":\r\n      return state.filter(\r\n        (_: string, index: number) => index !== action.payload\r\n      );\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default noteReducer;\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport noteReducer from \"./noteReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  notes: noteReducer,\r\n});\r\n\r\nexport type reducerType = ReturnType<typeof rootReducer>;\r\n\r\nexport default rootReducer;\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers\";\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}